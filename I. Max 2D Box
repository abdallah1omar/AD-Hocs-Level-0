    #include<bits/stdc++.h>
    /*
    #include<ext/pb_ds/assoc_container.hpp>
    #include<ext/pb_ds/tree_policy.hpp>
     *
    using namespace __gnu_pbds;
    using namespace std;
     
    typedef tree<int, null_type,greater_equal<int>, rb_tree_tag, tree_order_statistics_node_update> orderedSet;
     */
    // less = set ordered from less    oredered_of_key(x) => no. of ele smaller than x
    // less_equal = multiset ordered from less
    //greater = set ordered from greater    oredered_of_key(x) => no. of ele bigger than x
    //greater_equal = multiset  ordered from greater
    #define ONE_PEICE_3MK ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
    #include <iostream>
    #include <map>
    #include <algorithm>
    #include <vector>
    #include <stack>
    #include <queue>
    #define el cout << endl
    #define ll long long
    #define ull unsigned long long
    #define yes cout << "YES"
    #define no cout << "NO"
    #define print cout <<
    using namespace std;
    void JUDGE_MOTHER_FATHER()
    {
    #ifndef ONLINE_JUDGE
        freopen("Input.txt","r",stdin);
        freopen("Output.txt","w",stdout);
    #endif
     
    }
    int freq[200001]={0};
    //vector<vector<int>>ar(100001,vector<int>(100001,0));
    long long ar[1001][1001];
    int main()
    {
        JUDGE_MOTHER_FATHER();
        ONE_PEICE_3MK
        int t = 1;
      //   cin >> t;
        while (t--)
        {
            int n,m,x,y;cin>>n>>m>>x>>y;
            //int pre[n+1][m+1]={0};
            for (int i=1;i<=n;i++)
            {
                for (int j=1;j<=m;j++)
                {
                    cin>>ar[i][j];
                }
            }
            for (int i=1;i<=n;i++)
            {
                for (int j=1;j<=m;j++)
                {
                    ar[i][j]+=ar[i][j-1];
                }
            }
     
            for (int i=1;i<=n;i++)
            {
                for (int j=1;j<=m;j++)
                {
                    ar[i][j]+=ar[i-1][j];
                }
            }
           long long ans=LONG_LONG_MIN;
            for (int i=x;i<=n;i++)
            {
                for(int j=y;j<=m;j++)
                {
                    ans=max(ans,(ar[i][j]-ar[i][j-y]-ar[i-x][j]+ar[i-x][j-y]));
                }
            }
            cout<<ans;
        }
    }
     
