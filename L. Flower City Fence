#include<bits/stdc++.h>
/*
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
 *
using namespace __gnu_pbds;
using namespace std;
 
typedef tree<int, null_type,greater_equal<int>, rb_tree_tag, tree_order_statistics_node_update> orderedSet;
 */
// less = set ordered from less    oredered_of_key(x) => no. of ele smaller than x
// less_equal = multiset ordered from less
//greater = set ordered from greater    oredered_of_key(x) => no. of ele bigger than x
//greater_equal = multiset  ordered from greater
#define ONE_PEICE_3MK ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);
#include <iostream>
#include <map>
#include <algorithm>
#include <vector>
#include <stack>
#include <queue>
#define el cout << endl
#define ll long long
#define ull unsigned long long
#define yes cout << "YES"
#define no cout << "NO"
#define print cout <<
using namespace std;
void JUDGE_MOTHER_FATHER()
{
#ifndef ONLINE_JUDGE
    freopen("Input.txt","r",stdin);
    freopen("Output.txt","w",stdout);
#endif
 
}
int freq[200001]={0};
//vector<vector<int>>ar(100001,vector<int>(100001,0));
vector<long long> pre2(200001,0);
int main()
{
    JUDGE_MOTHER_FATHER();
    ONE_PEICE_3MK
    int t = 1;
    cin >> t;
    while (t--)
    {
        int n;
        cin>>n;
        ll ar[200005]={};
        ll pre[200005]={};
        memset(ar,0,sizeof ar);
        memset(pre,0,sizeof pre);
        for (int i=1;i<=n;i++)
        {
            cin>>ar[i];
        }
        if(ar[1]>n)
        {
            no;el;
            continue;
        }
        pre[1]=n;
        for(int i=n;i>=1;i--)//3 2 1
        {
            pre[ar[i]+1]--;
        }
        for(long long i=1;i<=ar[1];i++)
        {
            pre[i]+=pre[i-1];
        }
        bool x=0;
        for(long long i=1;i<=ar[1];i++)
        {
            if(ar[i]!=pre[i])
            {
                no;el;
                x=1;
                break;
            }
        }
        if(x==0)
        {
            yes;el;
        }
    }
}
